1. 서론

오늘날의 웹 애플리케이션은 네트워크 요청, 파일 입출력, 사용자 입력 처리 등 시간이 오래 걸리는 작업을 효율적으로 처리해야 한다.
이러한 환경에서 비동기 처리는 프로그램이 멈추지 않고 동시에 여러 작업을 수행할 수 있게 하는 핵심 기술로 자리 잡았다.
본 보고서에서는 자바스크립트의 비동기 처리 방식과 이를 구현하기 위한 Promise 및 async/await 문법의 개념, 특징, 장단점을 비교하여 설명한다.

2. 본론

2.1 비동기 처리의 개념

비동기 처리란 특정 작업의 완료를 기다리지 않고, 다음 작업을 병렬적으로 수행하는 방식이다.
이 방식은 프로그램의 응답성을 높이고, CPU와 메모리 자원 활용 효율을 향상시킨다.

구분	   |동기 (Synchronous)	                |비동기(Asynchronous)
실행 순서|	순차 실행 (앞선 작업 완료 후 다음 실행)	|대기 없이 병렬 실행
코드 예시|	alert() → 다음 코드 중단	          |setTimeout() → 기다리지 않고 다음 코드 실행
장점	   |코드 단순성	                        |효율적 자원 사용, 빠른 반응성
단점	   |처리 지연                          	|코드 복잡도 증가 가능

2.2 콜백 함수 (Callback Function)

초기의 비동기 처리는 콜백 함수를 통해 이루어졌다.
콜백은 작업이 끝난 후 호출되는 함수를 의미하며, 다음 예시와 같다.

ex)
function work(callback) {
  setTimeout(() => {
    console.log("작업 완료");
    callback();
  }, 1000);
}
work(() => {
  console.log("콜백 실행");
});

이 방식은 단순하지만, 여러 비동기 작업이 중첩되면 “콜백 지옥(Callback Hell)”이라는 가독성 문제를 초래한다.

2.3 Promise

(1) 개념

Promise는 비동기 작업의 성공(fulfilled)과 실패(rejected) 상태를 명확히 구분해주는 객체 기반의 처리 구조이다.

(2) 상태 변화
상태     	 |의미
pending  	 |수행 중
fulfilled	 |작업 성공
rejected	 |작업 실패

ex)
const promise = new Promise((resolve, reject) => {
  const success = true;
  if (success) resolve("성공!");
  else reject("실패!");
});
promise
  .then(result => console.log(result))
  .catch(error => console.error(error))
  .finally(() => console.log("작업 종료"));

(4) 장점

비동기 작업의 흐름 제어가 명확
체이닝(then)으로 순차 실행 가능
에러 처리(catch)로 예외 관리 용이

2.4 async / await
(1) 개념

async와 await은 Promise를 기반으로 한 문법적 개선으로, 비동기 코드를 동기 코드처럼 읽히게 만든다.

ex)
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
async function run() {
  console.log("시작");
  await delay(1000);  // 1초 대기
  console.log("1초 후 실행");
}
run();

(2) 에러 처리

try...catch 문을 활용하여 에러를 간결하게 처리할 수 있다.

ex)
async function getData() {
  try {
    const response = await fetch("https://api.example.com/data");
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.error("에러 발생:", error);
  }
}

(3) 특징

Promise보다 가독성이 뛰어남
비동기 흐름을 동기적으로 표현 가능
에러 핸들링이 직관적

2.5 Promise와 async/await 비교

구분         	|Promise	            |async/await
코드 구조     	|.then().catch() 체이닝	|동기식 구조
에러 처리     	|.catch() 사용       	|try...catch 사용
가독성	        |체인 길어질수록 낮음    	|직관적, 깔끔함
복잡한 로직 처리	|관리 어려움           	|코드 흐름 명확

3. 결론

비동기 처리는 현대적인 웹 환경에서 필수적인 기술이며, 효율적인 사용자 경험을 제공하기 위해 반드시 이해해야 하는 개념이다.
콜백 방식은 단순하지만 복잡한 로직에는 부적합하다는 한계가 있었고, 이를 해결하기 위해 Promise가 등장했다.
이후 async/await 문법이 도입되면서 비동기 코드를 동기적 흐름처럼 표현할 수 있게 되어 가독성과 유지보수성이 크게 향상되었다.
결국, 비동기 처리는 단순한 기술을 넘어 웹 애플리케이션의 성능과 사용자 경험을 좌우하는 핵심 원리라 할 수 있다.               
