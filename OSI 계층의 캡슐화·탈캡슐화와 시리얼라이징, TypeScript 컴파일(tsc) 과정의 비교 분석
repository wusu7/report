─────────────────────────────
1. 개요
─────────────────────────────
컴퓨터 네트워크와 프로그래밍 언어는 서로 다른 영역이지만,
데이터를 "다른 계층" 또는 "다른 환경"으로 전달하기 위해
형태를 변환한다는 공통된 원리를 가진다.

본 보고서는 OSI 7계층의 캡슐화·탈캡슐화 과정과,
시리얼라이징(Serialization) 및 TypeScript의 컴파일(tsc) 과정을
비교하여 이들의 구조적 유사점과 차이점을 분석한다.

─────────────────────────────
2. OSI 계층과 캡슐화 과정
─────────────────────────────
1) 개념
OSI(Open Systems Interconnection) 7계층은
데이터 통신의 흐름을 7단계로 구분하여 설명하는 모델이다.

- 상위 계층에서 하위 계층으로 내려갈 때 → 캡슐화(Encapsulation)
- 하위 계층에서 상위 계층으로 올라갈 때 → 탈캡슐화(Decapsulation)

2) 과정 요약
예를 들어, 애플리케이션 계층에서 메시지를 보낼 때:
  • 응용 계층 데이터 → (TCP 헤더 부착) → 세그먼트
  • 세그먼트 → (IP 헤더 부착) → 패킷
  • 패킷 → (이더넷 헤더/트레일러 부착) → 프레임
  • 프레임 → 전송 매체로 송신

수신 측에서는 이 과정이 역순으로 일어나며,
각 계층이 자신의 헤더를 제거(탈캡슐화)하면서 데이터를 복원한다.

─────────────────────────────
3. 시리얼라이징(Serialization)
─────────────────────────────
1) 개념
시리얼라이징은 프로그램 내의 객체(Object) 또는 데이터 구조(Data Structure)를
전송하거나 저장 가능한 형식(바이트 스트림, 문자열 등)으로 변환하는 과정이다.

2) 반대 개념
- 역직렬화(Deserialization): 시리얼라이즈된 데이터를 다시 객체로 복원하는 과정

3) 예시
- JSON.stringify(obj) → 문자열로 변환
- JSON.parse(str) → 다시 객체로 복원

4) OSI와의 유사점
- OSI의 캡슐화가 ‘데이터에 헤더를 덧붙이는 것’이라면,
  시리얼라이징은 ‘데이터를 송신 가능한 형태로 변환하는 것’이다.
- 둘 다 "전송 가능한 형태로 데이터를 포장"한다는 점에서 개념적 유사성이 있다.

─────────────────────────────
4. TypeScript → JavaScript 전환(tsc)
─────────────────────────────
1) 개념
TypeScript는 타입 안정성과 개발 편의성을 위해 만들어진 상위 언어이며,
브라우저에서 직접 실행되지 않는다.  
따라서 **tsc(TypeScript Compiler)**를 통해 JavaScript 코드로 변환되어야 실행 가능하다.

2) 과정
  • 개발자 작성 코드: TypeScript (.ts)
  • 변환(컴파일): tsc에 의해 타입 검사 후 JavaScript로 변환
  • 결과: 브라우저 또는 Node.js가 실행할 수 있는 .js 파일

3) OSI/시리얼라이징과의 비교
- OSI의 "캡슐화"는 네트워크 전송을 위한 물리적 포장
- 시리얼라이징은 데이터 이동을 위한 논리적 포장
- tsc는 언어 실행 환경 호환을 위한 코드 포장(변환)

─────────────────────────────
5. 세 과정의 비교 요약
─────────────────────────────
| 구분                  | 목적           | 대상            | 결과물              | 반대 과정       |
|-----------------------|---------------|-----------------|---------------------|----------------|
| 캡슐화                 | 네트워크 전송  | 데이터 패킷      | 헤더가 붙은 프레임    | 탈캡슐화       |
| 시리얼라이징            | 데이터 교환    | 객체, 구조체    | 문자열, 바이트 스트림 | 역직렬화        |
| TypeScript 컴파일(tsc) | 코드 실행 호환 | TypeScript 코드 | JavaScript 코드      | 없음(재컴파일)  |

─────────────────────────────
6. 결론
─────────────────────────────
세 과정은 모두 "다른 계층이나 환경에서 이해할 수 있도록 데이터를 변환"한다는 공통점을 가진다.
- OSI: 전송 계층 간의 데이터 이동
- 시리얼라이징: 시스템 간의 데이터 이동
- tsc: 언어/환경 간의 코드 이동

결국, 세 과정 모두 "정보를 이해 가능한 형태로 포장했다가, 다시 풀어내는 과정"이라는 점에서
정보 전달의 핵심 원리를 공유하고 있다.
