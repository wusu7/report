1. 기본 개념
-------------
JSON (JavaScript Object Notation)
- 자바스크립트 객체 문법 기반의 데이터 포맷
- 간단하고 가독성이 좋음
- 예시: { "name": "Alice", "age": 25 }

XML (eXtensible Markup Language)
- 태그 기반의 마크업 언어
- 구조와 의미를 명시적으로 표현 가능
- 예시: <person><name>Alice</name><age>25</age></person>

YAML (YAML Ain’t Markup Language)
- 사람이 읽기 편한 데이터 직렬화 포맷
- 들여쓰기로 계층 구조 표현
- 예시: name: Alice
        age: 25

2. 문법 비교
-------------
항목      | JSON                         | XML                     | YAML
----------|------------------------------|-------------------------|-----------------
구조 표현 | 객체 {}, 배열 []              | 태그 <tag>               | 들여쓰기
데이터 타입| 문자열, 숫자, 불린, 배열, 객체 | 문자열(기본 텍스트)      | 문자열, 숫자, 불린, 배열, 객체
주석      | 불가                         | 가능 <!-- comment -->    | 가능 # comment
가독성    | 좋음                         | 다소 복잡                 | 매우 좋음
중첩 표현 | 중첩 객체/배열 가능            | 중첩 태그 가능           | 들여쓰기로 중첩 표현

3. 특징 비교
-------------
특징      | JSON               | XML                       | YAML
----------|------------------|--------------------------|-----------------
가독성    | 중간~좋음         | 다소 복잡               | 매우 좋음
용량      | 작음              | 태그 때문에 큼           | 작음
표준화    | 널리 사용         | 오래된 표준              | 개발자 친화적
확장성    | 제한적(JSON Schema) | 매우 좋음(DTD/XSD)     | 제한적
데이터 타입 유지 | 명확         | 문자열 위주              | 명확
사용 용도 | 웹 API, 설정, 데이터 교환 | 문서 중심 데이터, SOAP, 레거시 시스템 | 설정 파일, CI/CD 파일(.yml)

4. 장단점
----------
JSON
- 장점: 간단, 직관적, 웹/JS 친화, 대부분 언어 지원
- 단점: 주석 불가, 메타데이터 표현 어려움

XML
- 장점: 구조/의미 명시적, 스키마 검증 가능, 레거시 호환성 높음
- 단점: 태그 많아 복잡, 파일 크기 큼

YAML
- 장점: 사람이 읽기 쉬움, 직관적, 들여쓰기로 계층 구조 표현
- 단점: 들여쓰기 오류 주의, 복잡 구조에서 파싱 문제 가능

5. 사용 예시
-------------
JSON: REST API, 웹 프론트엔드-백엔드 데이터 통신, 모바일 앱
XML: SOAP API, 문서 기반 데이터, RSS, 레거시 시스템
YAML: 설정 파일(docker-compose.yml, GitHub Actions), CI/CD 파이프라인

정리:
- 가볍고 빠른 데이터 교환 → JSON
- 문서/구조 중심, 스키마 필요 → XML
- 사람이 읽고 쓰기 쉬운 설정 파일 → YAML
