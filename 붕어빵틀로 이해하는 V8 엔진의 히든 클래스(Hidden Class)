1. 개요

자바스크립트는 동적 언어(Dynamic Language)이기 때문에,
객체의 구조(프로퍼티)가 실행 중에도 자유롭게 바뀔 수 있다.
하지만 이런 유연성은 속도 저하의 원인이 된다.

Google의 V8 엔진은 이 문제를 해결하기 위해
“히든 클래스(Hidden Class)”라는 최적화 개념을 도입했다.
이 개념은 쉽게 말해 붕어빵틀과 같다.
즉, 객체의 모양(프로퍼티 구조)을 틀처럼 미리 정리해두고,
같은 모양의 객체는 같은 틀을 재사용해 빠르게 구워내는 방식이다.

2. 히든 클래스 = 붕어빵틀

자바스크립트에서 객체는 속성(프로퍼티)으로 구성된다.

예를 들어 다음과 같은 코드를 보자.

function Player(name, HP, MP) {
  this.name = name;
  this.HP = HP;
  this.MP = MP;
}
const p1 = new Player("철수", 100, 50);


이때 V8 엔진은 내부적으로 “Player라는 모양의 붕어빵틀”을 만든다.
이 틀 안에는 name, HP, MP라는 프로퍼티의 위치와 순서가 정해져 있다.

프로퍼티 이름(name, HP, MP) → 붕어빵의 모양(틀의 형상)

프로퍼티 값("철수", 100, 50) → 붕어빵 안의 내용물(팥, 슈크림 등)

즉, 안에 뭐가 들어가든(값이 달라도)
모양이 같으면 **같은 붕어빵틀(히든 클래스)**로 만들어진 객체다.

3. 속성 순서에 따른 틀의 변화

V8은 프로퍼티를 추가하는 순서에 따라
새로운 붕어빵틀(히든 클래스)을 만든다.

순서	코드	내부 히든 클래스
①	this.name = name;	C1 (첫 번째 틀)
②	this.HP = HP;	C2 (C1에서 확장된 틀)
③	this.MP = MP;	C3 (최종 완성된 틀)

👉 이때 C1 → C2 → C3로 이어지는 구조를
“히든 클래스 체인(Transition Chain)”이라고 한다.

즉, 작은 붕어빵틀이 순서대로 연결된 사슬 구조로 볼 수 있다.
이 사슬을 따라가면 최종적으로 완성된 붕어빵틀(C3)에 도달한다.

4. 순서가 다르면 틀이 다르다

만약 프로퍼티 추가 순서가 달라진다면,
V8은 “전혀 다른 붕어빵틀”을 새로 만든다.

function Player2(name, MP, HP) {
  this.name = name;
  this.MP = MP;
  this.HP = HP;
}


이 객체는 같은 재료를 쓰더라도
모양이 다른 잉어빵틀에 해당한다.
그래서 Player 객체와는 히든 클래스를 공유하지 않는다.

즉,

“프로퍼티 순서가 다르면 붕어빵 모양이 달라진다.”
같은 재료라도 “붕어빵틀”과 “잉어빵틀”은 다른 것이다.

5. 히든 클래스의 장점
구분	붕어빵 비유	기술적 설명
속도 향상	같은 틀로 계속 붕어빵을 찍어내면 빠르다	동일 구조의 객체는 같은 메모리 레이아웃을 사용해 접근 속도 향상
캐싱 효율	같은 위치에 팥을 넣으면 손이 덜 간다	프로퍼티 오프셋이 고정되어 CPU 캐시 효율 증가
JIT 최적화	틀 모양이 예측 가능하니 효율적 조리 가능	JIT 컴파일러(TurboFan)가 기계어를 최적화해 생성 가능
6. 결론

히든 클래스는 자바스크립트 객체를 붕어빵처럼 효율적으로 찍어내는 틀이다.

같은 구조(프로퍼티 순서)를 가진 객체는 같은 틀을 재사용한다.

속성 순서가 다르면 전혀 다른 틀이 만들어진다.

덕분에 V8은 동적 언어의 유연성을 유지하면서도
정적 언어 수준의 속도를 구현할 수 있다.

요약하자면,

“히든 클래스는 자바스크립트 객체의 붕어빵틀이다.”
같은 순서의 재료로 만든다면 같은 모양의 붕어빵(객체)이 되고,
순서가 달라지면 새로운 틀이 생겨 전혀 다른 빵이 된다.
